plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
//    低版本gradle可以通过 高版本通过不了 自定义插件 用于学习
//    id com.saint.plugin.AsmPlugin
//    id 'inject-plugin'
}
Node node = getStringsXmlNode()
String buildWay = readBuildWay(node)
android {

    signingConfigs {
        debug {
            storeFile = file("../saint_key.jks")
            storePassword = "12345678"
            keyAlias = "saint"
            keyPassword = "12345678"
            enableV1Signing = true
            enableV2Signing = true
        }
        release {
            storeFile = file("../saint_key.jks")
            storePassword = "12345678"
            keyAlias = "saint"
            keyPassword = "12345678"
            enableV1Signing = true
            enableV2Signing = true
        }
    }

    compileSdk rootProject.android.compileSdk
    defaultConfig {
        applicationId rootProject.android.applicationId
        minSdk rootProject.android.minSdk
        targetSdk rootProject.android.targetSdk
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled = true

        ndk {
            // 设置支持的 SO 库构架，注意这里要根据你的实际情况来设置
            //noinspection ChromeOsAbiSupport
            abiFilters "armeabi-v7a"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }


    // 维度
    flavorDimensions = ["version"]

    productFlavors {
        String buildDate = readBuildDate(node)
        if (buildWay == "DEV") {
            // 开发版本
            dev {
                dimension = "version"
                versionName = "${versionName}.${buildDate}"
                // 是否使用线上环境
                buildConfigField("boolean", "IS_ONLINE", "false")
            }
        }

        if (buildWay == "TE") {
            // 测试版本
            te {
                dimension = "version"
                // 版本名后缀
                versionNameSuffix = "-${buildDate}"
                versionName = "${versionName}" + "." + buildDate
                // 是否使用线上环境
                buildConfigField("boolean", "IS_ONLINE", "false")
            }
        }

        if (buildWay == "PRODUCT") {
            // 正式线上版本
            product {
                dimension = "version"
                // 版本名后缀
                versionNameSuffix = "-${buildDate}"
                versionName = "${versionName}" + "." + buildDate
                // 是否使用线上环境
                buildConfigField("boolean", "IS_ONLINE", "true")
            }
        }
    }

//    allprojects {
//        gradle.projectsEvaluated {
//            tasks.withType(JavaCompile) {
//                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//            }
//        }
//    }

    sourceSets {
        named("main") {
            java.srcDirs("src/main/java", "src/main/kotlin")
            aidl.srcDirs("src/main/aidl")
            jniLibs.srcDirs("libs", "src/main/jniLibs")
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    // kotlin Jvm 版本
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = [
                "-Xopt-in=kotlinx.serialization.ExperimentalSerializationApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
        ]
    }

    kapt {
        correctErrorTypes = true
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                outputFileName = "${buildWay.toLowerCase()}-${variant.buildType.name}-${defaultConfig.versionName}.apk"
            }
        }
    }
}

Node getStringsXmlNode() {
    def stringsFile = file("src/main/res/values/jenkins.xml")
    def node = new XmlParser().parse(stringsFile)
    return node
}


String readBuildWay(Node node) {
    def buildWay = node.string.find { string ->
        string.@name == "build_way"
    }.text()
    return buildWay
}

String readBuildDate(Node node) {
    def buildDate = node.string.find { string ->
        string.@name == "build_date"
    }.text()
    return buildDate
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.depsLibs.appcompat
    implementation rootProject.depsLibs.coreKtx

    implementation rootProject.depsLibs.navigationFragment
    implementation rootProject.depsLibs.navigationUI
    implementation rootProject.depsLibs.constraintlayout
    implementation rootProject.depsLibs.material

    implementation rootProject.depsLibs.lifecycleRuntime
    implementation rootProject.depsLibs.lifecycleRuntimeKtx
    implementation rootProject.depsLibs.lifecycleExtensions
    implementation rootProject.depsLibs.liveDataKtx
    implementation rootProject.depsLibs.viewModelKtx

    implementation rootProject.depsLibs.databinding
    //retrofit2
    implementation rootProject.depsLibs.retrofit2
    implementation rootProject.depsLibs.retrofit2AdapterRxjava
    implementation rootProject.depsLibs.retrofit2Gson
    implementation rootProject.depsLibs.loggingInterceptor
    debugImplementation rootProject.depsLibs.leakcanary
    //google
    implementation rootProject.depsLibs.gson
    implementation rootProject.depsLibs.volley
    //reactivex
    implementation rootProject.depsLibs.rxjava
    implementation rootProject.depsLibs.rxandroid
    //kotlinx
    implementation rootProject.depsLibs.coroutines
    implementation rootProject.depsLibs.coroutinesCore
    //paging
    implementation rootProject.depsLibs.pagingRuntime
    implementation rootProject.depsLibs.pagingRxjava
    //work
    implementation rootProject.depsLibs.workRuntime
    //room
    kapt rootProject.depsLibs.roomCompiler
    implementation rootProject.depsLibs.roomKtx
    implementation rootProject.depsLibs.roomRuntime

    testImplementation rootProject.depsLibs.junit
    androidTestImplementation rootProject.depsLibs.espressoCore

    implementation rootProject.depsLibs.glide
    kapt rootProject.depsLibs.glideCompiler

    implementation rootProject.depsLibs.permissionYZJ

    implementation(project(':lib-biometric'))
    implementation(project(':lib-kotlin'))
    implementation(project(':lib-practise'))
    implementation(project(':asm-annotation'))
}
